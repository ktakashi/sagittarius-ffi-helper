#!/bin/env sagittarius
;; -*- mode:scheme; coding:utf-8; -*-

#!read-macro=sagittarius/regex
(import (rnrs)
	(srfi :26)
	(srfi :39)
	(util file)
	(sagittarius control)
	(sagittarius regex)
	(parser)
	(preprocess)
	(prefix (parser c) c:)
	(prefix (preprocess c) c:)
	(getopt)
	(pp))

(define preprocessor (make-preprocessor 'c))
(define parser (make-parser 'c))


(define (main args)
  (define (parse-def define)
    (cond ((#/(\w+?)=(.+)/ define) =>
	   (lambda (m) (cons (m 1) (m 2))))
	  (else (cons define ""))))
  (define (do-parse in)
    (let loop ((r '()))
      (if (eof-object? (peek-char in))
	  (reverse! r)
	  (loop (cons (parser in) r)))))
  (with-args (cdr args)
      ((includes (#\I "include") * '())
       (defines  (#\D "define") * '())
       (types    (#\t "typedefs") * '())
       (expand   (#\E "expand") #f #f)
       . rest)
    (when (null? rest) (usage))
    (let-values (((dir base ext) (decompose-path (car rest)))
		 ((out path) (make-temporary-file)))
      (let ((out (transcoded-port out (native-transcoder))))
	(parameterize ((*includes* includes)
		       (*current-path* dir)
		       
		       (c:*definitions* (map parse-def defines)))
	  (unwind-protect
	      (begin
		(let ((macros (call-with-input-file (car rest)
				(cut preprocessor <> out))))
		  (flush-output-port out)
		  (parameterize ((c:*typedefs* (map string->symbol types)))
		    (let ((defs (call-with-input-file path (cut parser <>))))
		      (pp defs)))))
	    (close-output-port out)
	    (if expand 
		(rename-file path (string-append base "." ext))
		(delete-file path))
	    ))))))
